var express = require('express');
var router = express.Router();

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});
// node保持了JavaScript再浏览器中单线程的特点，而且再node中，JavaScript与其余线程事无法共享任何状态的。单线程最大的好处是不用像多线程编程那样处处在意状态的同步问题，这里没有死锁存在，也没有线程上下文 交换所带来的性能上的开销。

// 单线程的弱点  1.无法利用多核CPU。2.错误会引起整个应用推出，应用的健壮性值得考验 3.大量计算占用CPU导致无法继续调用异步I/O

// node 模块实现   再node中引入模块，需要的3个步骤，1.路径分析 2.文件定位3.编译执行

// 在node中，模块分为两类：一类是node提供的模块，称为核心模块：另一类是用户编写的模块， 称为文件模块。
/*
 核心模块部分在node源代码编译过程中，编译进了二进制执行文件。在node进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。

 文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。

 */
module.exports = router;
